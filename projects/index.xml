<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Elias Watson</title><link>/projects/</link><description>Elias Watson (Projects)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Sep 2021 12:00:00 -0500</lastBuildDate><atom:link href="/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Bézier Curve Visualization</title><link>/projects/bezier_curve_visualization/</link><pubDate>Sat, 18 Sep 2021 12:00:00 -0500</pubDate><guid>/projects/bezier_curve_visualization/</guid><description>&lt;iframe width="640" height="360" frameborder="0" src="https://www.shadertoy.com/embed/NdG3zt?gui=true&amp;t=10&amp;paused=false&amp;muted=false" allowfullscreen>&lt;/iframe>
&lt;p>After watching Freya Holmér&amp;rsquo;s video on Bézier curves &lt;em>(linked below)&lt;/em>, I was inspired to create a GPU shader based on her visualizations.
The four control points (unmoving white circles) can be dragged to change the curve.
The lines are rendered using 2D distance fields.&lt;/p>
&lt;hr>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/aVwxzDHniEw?si=lKBcgp903fc02blu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen>&lt;/iframe></description></item><item><title>University Graphics Project</title><link>/projects/university_graphics_project/</link><pubDate>Sat, 01 May 2021 19:00:00 -0500</pubDate><guid>/projects/university_graphics_project/</guid><description>&lt;p>&lt;a href="https://github.com/EliasWatson/Graphics-Project">&lt;em>View this project on GitHub&lt;/em>&lt;/a>&lt;/p>
&lt;p>For my computer science independent study at Bob Jones University, I wrote a realistic realtime 3D renderer in C++ and OpenGL.
I spent 148 hours on this project over the course of four months.&lt;/p>
&lt;p>The program supports loading 3D scenes from GLTF files.
It can render shadows and skybox-based reflections.
The surface shader supports basic PBR materials with albedo, metallic, roughness, and normal maps.
The user can navigate the scene in a free-cam with the WASD keys and the mouse.
The scene can be inspected and edited through the included GUI.&lt;/p>
&lt;p>Prior to this project, I had experience with writing OpenGL shaders on ShaderToy.
However, this project taught me a lot about the OpenGL pipeline and gave me a more complete picture of how 3D graphics are rendered to the screen.
I also learned how to use CMake to build C++ projects across multiple platforms.&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://eliaswatson.dev/university_graphics_project/dragon_scene.jpg" alt="Dragon Scene Screenshot">&lt;/p>
&lt;p>&lt;img src="https://eliaswatson.dev/university_graphics_project/cash_register.jpg" alt="Cash Register Scene Screenshot">&lt;/p></description></item><item><title>Terrain Raymarcher</title><link>/projects/terrain_raymarcher/</link><pubDate>Sat, 12 Jan 2019 12:00:00 -0500</pubDate><guid>/projects/terrain_raymarcher/</guid><description>&lt;p>&lt;em>The shader can be paused by clicking the button in the bottom left of the viewport&lt;/em>&lt;/p>
&lt;iframe width="640" height="360" frameborder="0" src="https://www.shadertoy.com/embed/tsl3zl?gui=true&amp;t=10&amp;paused=false&amp;muted=false" allowfullscreen>&lt;/iframe></description></item></channel></rss>