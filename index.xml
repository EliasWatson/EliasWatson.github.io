<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elias Watson</title><link>/</link><description>Elias Watson</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jul 2024 17:03:12 -0400</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>/about/</link><pubDate>Thu, 04 Jul 2024 17:03:12 -0400</pubDate><guid>/about/</guid><description>&lt;p>Hey there!&lt;/p>
&lt;p>I&amp;rsquo;m Elias Watson, a passionate programmer and technology enthusiast in my 20s, currently residing in Greenville, SC, USA.
I graduated with a bachelor&amp;rsquo;s degree in computer science from Bob Jones University.&lt;/p>
&lt;p>As a follower of Jesus, I strive to integrate my faith with my love for technology and science.
My main interests lie in game development and computer graphics, but I have a wide range of passions.&lt;/p>
&lt;p>I am language agnostic and pride myself on quickly picking up new languages and frameworks.
Here are some of the technologies I have experience with:&lt;/p>
&lt;ul>
&lt;li>Python&lt;/li>
&lt;li>TypeScript &amp;amp; JavaScript&lt;/li>
&lt;li>C &amp;amp; C++&lt;/li>
&lt;li>Rust&lt;/li>
&lt;li>Lua&lt;/li>
&lt;li>Java&lt;/li>
&lt;li>Lisp&lt;/li>
&lt;/ul>
&lt;p>I also enjoy experimenting with more obscure programming languages like Elm, Odin, FORTH, Smalltalk, APL, and more.&lt;/p>
&lt;p>Feel free to connect with me or check out my projects!&lt;/p>
&lt;hr>
&lt;p>&lt;em>Any opinions I express are solely my own and are not representative of my past, present, or future employers.&lt;/em>&lt;/p></description></item><item><title>Advent of Code 2022 - Day 3</title><link>/posts/aoc_2022_day_3/</link><pubDate>Sun, 04 Dec 2022 16:00:00 -0500</pubDate><guid>/posts/aoc_2022_day_3/</guid><description>&lt;h1 id="part-1" >
&lt;div>
&lt;a href="#part-1">
##
&lt;/a>
Part 1
&lt;/div>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-input-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (get-input-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; DUPLICATE FINDING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (split-string-in-half s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([half-index (&lt;span style="color:#ff5c57">/&lt;/span> (&lt;span style="color:#ff5c57">string-length&lt;/span> s) &lt;span style="color:#ff9f43">2&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">substring&lt;/span> s &lt;span style="color:#ff9f43">0&lt;/span> half-index)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">substring&lt;/span> s half-index))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (chars-in-both-strings a b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">set-intersect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">string-&amp;gt;list&lt;/span> a)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">string-&amp;gt;list&lt;/span> b)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (find-duplicate-in-rucksack s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">apply&lt;/span> chars-in-both-strings (split-string-in-half s)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PRIORITY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (item-priority c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> c)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">&amp;lt;&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\A&lt;/span>)) &lt;span style="color:#ff9f43">27&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>)) &lt;span style="color:#ff9f43">1&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (rucksack-priority s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (item-priority (&lt;span style="color:#ff5c57">car&lt;/span> (find-duplicate-in-rucksack s))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">map&lt;/span> rucksack-priority (get-input-lines)))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="part-2" >
&lt;div>
&lt;a href="#part-2">
##
&lt;/a>
Part 2
&lt;/div>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-input-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (get-input-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; GROUPING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (into-groups elves)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">not&lt;/span> (&lt;span style="color:#ff5c57">empty?&lt;/span> elves))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> (&lt;span style="color:#ff5c57">take&lt;/span> elves &lt;span style="color:#ff9f43">3&lt;/span>) (into-groups (&lt;span style="color:#ff5c57">drop&lt;/span> elves &lt;span style="color:#ff9f43">3&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (duplicate-char-in-strings strs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">car&lt;/span> (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">set-intersect&lt;/span> (&lt;span style="color:#ff5c57">map&lt;/span> &lt;span style="color:#ff5c57">string-&amp;gt;list&lt;/span> strs))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PRIORITY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (item-priority c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> c)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">&amp;lt;&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\A&lt;/span>)) &lt;span style="color:#ff9f43">27&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>)) &lt;span style="color:#ff9f43">1&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (group-priority g)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (item-priority (duplicate-char-in-strings g)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">map&lt;/span> group-priority (into-groups (get-input-lines))))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2022 - Day 2</title><link>/posts/aoc_2022_day_2/</link><pubDate>Sat, 03 Dec 2022 17:00:00 -0500</pubDate><guid>/posts/aoc_2022_day_2/</guid><description>&lt;h1 id="part-1" >
&lt;div>
&lt;a href="#part-1">
##
&lt;/a>
Part 1
&lt;/div>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/string)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PARSING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-choice c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff6ac1">or&lt;/span> (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;A&amp;#34;&lt;/span>) (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;X&amp;#34;&lt;/span>)) &lt;span style="color:#ff9f43">0&lt;/span>] &lt;span style="color:#78787e">; Rock -&amp;gt; 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff6ac1">or&lt;/span> (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;B&amp;#34;&lt;/span>) (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;Y&amp;#34;&lt;/span>)) &lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#78787e">; Paper -&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff6ac1">or&lt;/span> (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;C&amp;#34;&lt;/span>) (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;Z&amp;#34;&lt;/span>)) &lt;span style="color:#ff9f43">2&lt;/span>] &lt;span style="color:#78787e">; Scissors -&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">-1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Example: &amp;#34;B X&amp;#34; -&amp;gt; &amp;#39;(1 0)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-strategy-line line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> parse-choice (&lt;span style="color:#ff5c57">string-split&lt;/span> line)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-all-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (read-all-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-strategies)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> parse-strategy-line (read-all-lines)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; SCORING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; The winning choice can be calculated by just adding 1 and modulo&amp;#39;ing by 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 0 (Rock) is beat by 1 (Paper)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 1 (Paper) is beat by 2 (Scissors)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 2 (Scissors) is beat by 0 (Rock)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (winning-choice n) (&lt;span style="color:#ff5c57">modulo&lt;/span> (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>) &lt;span style="color:#ff9f43">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Since rock gets 1 point, paper gets 2, and scissors gets 3, we can just&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; add one to our numeric representation of the choices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-choice n) (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-outcome other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you (winning-choice other)) &lt;span style="color:#ff9f43">6&lt;/span>) &lt;span style="color:#78787e">; 6 points for winning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you other) &lt;span style="color:#ff9f43">3&lt;/span>) &lt;span style="color:#78787e">; 3 points for drawing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>))) &lt;span style="color:#78787e">; No points for losing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-round other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (score-choice you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (score-outcome other you)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-rounds rounds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> (&lt;span style="color:#ff6ac1">lambda&lt;/span> (r) (&lt;span style="color:#ff5c57">apply&lt;/span> score-round r)) rounds))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum nums) (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> nums))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(sum (score-rounds (read-strategies)))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="part-2" >
&lt;div>
&lt;a href="#part-2">
##
&lt;/a>
Part 2
&lt;/div>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/string)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; LOGIC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; The winning choice can be calculated by just adding 1 and modulo&amp;#39;ing by 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 0 (Rock) is beat by 1 (Paper)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 1 (Paper) is beat by 2 (Scissors)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 2 (Scissors) is beat by 0 (Rock)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (winning-choice n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">modulo&lt;/span> (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>) &lt;span style="color:#ff9f43">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Likewise, the losing choice can be calculated by adding 2 and modulo&amp;#39;ing by 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 0 (Rock) beats 2 (Scissors)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 1 (Paper) beats 0 (Rock)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 2 (Scissors) beats 1 (Paper)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (losing-choice n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">modulo&lt;/span> (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">2&lt;/span>) &lt;span style="color:#ff9f43">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PARSING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-choice c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;A&amp;#34;&lt;/span>) &lt;span style="color:#ff9f43">0&lt;/span>] &lt;span style="color:#78787e">; Rock -&amp;gt; 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;B&amp;#34;&lt;/span>) &lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#78787e">; Paper -&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;C&amp;#34;&lt;/span>) &lt;span style="color:#ff9f43">2&lt;/span>] &lt;span style="color:#78787e">; Scissors -&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">-1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-outcome other outcome)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">list&lt;/span> other
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> outcome &lt;span style="color:#5af78e">&amp;#34;X&amp;#34;&lt;/span>) (losing-choice other)] &lt;span style="color:#78787e">; Lose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> outcome &lt;span style="color:#5af78e">&amp;#34;Y&amp;#34;&lt;/span>) other] &lt;span style="color:#78787e">; Draw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> outcome &lt;span style="color:#5af78e">&amp;#34;Z&amp;#34;&lt;/span>) (winning-choice other)] &lt;span style="color:#78787e">; Win&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">-1&lt;/span>])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-strategy-line line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([fields (&lt;span style="color:#ff5c57">string-split&lt;/span> line)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (parse-outcome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (parse-choice (&lt;span style="color:#ff5c57">list-ref&lt;/span> fields &lt;span style="color:#ff9f43">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">list-ref&lt;/span> fields &lt;span style="color:#ff9f43">1&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-all-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (read-all-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-strategies)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> parse-strategy-line (read-all-lines)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Since rock gets 1 point, paper gets 2, and scissors gets 3, we can just&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; add one to our numeric representation of the choices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-choice n) (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-outcome other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you (winning-choice other)) &lt;span style="color:#ff9f43">6&lt;/span>) &lt;span style="color:#78787e">; 6 points for winning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you other) &lt;span style="color:#ff9f43">3&lt;/span>) &lt;span style="color:#78787e">; 3 points for drawing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>))) &lt;span style="color:#78787e">; No points for losing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-round other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (score-choice you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (score-outcome other you)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-rounds rounds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> (&lt;span style="color:#ff6ac1">lambda&lt;/span> (r) (&lt;span style="color:#ff5c57">apply&lt;/span> score-round r)) rounds))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum nums) (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> nums))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(sum (score-rounds (read-strategies)))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2022 - Day 1</title><link>/posts/aoc_2022_day_1/</link><pubDate>Sat, 03 Dec 2022 13:00:00 -0500</pubDate><guid>/posts/aoc_2022_day_1/</guid><description>&lt;p>This year I decided to solve &lt;a href="https://adventofcode.com/2022">Advent of Code&lt;/a> in &lt;a href="https://racket-lang.org">Racket&lt;/a>.
I&amp;rsquo;ve seen lots of people gush over how much they love Lisp, so I want to see what it&amp;rsquo;s all about.
The functional paradigm isn&amp;rsquo;t completely foreign to me as I&amp;rsquo;ve written a few web apps in Elm and I&amp;rsquo;ve messed around with Haskell, but I&amp;rsquo;ve never used a Lisp for anything complex.&lt;/p>
&lt;h1 id="part-1" >
&lt;div>
&lt;a href="#part-1">
##
&lt;/a>
Part 1
&lt;/div>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum integers from stdin until a blank line (or EOF) is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">non-empty-string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">string-&amp;gt;number&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (sum-input-integers-until-break (&lt;span style="color:#ff5c57">read-line&lt;/span>)))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get a list of calories from stdin, stopping when EOF is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-calorie-list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">eof-object?&lt;/span> line) &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> (&lt;span style="color:#ff5c57">cons&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (get-calorie-list))])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get the maximum calories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">max&lt;/span> (get-calorie-list))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="part-2" >
&lt;div>
&lt;a href="#part-2">
##
&lt;/a>
Part 2
&lt;/div>
&lt;/h1>
&lt;p>Part 2 is almost identical.
The only difference is that we sum the top three calorie counts instead of just taking the maximum.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum integers from stdin until a blank line (or EOF) is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">non-empty-string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">string-&amp;gt;number&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (sum-input-integers-until-break (&lt;span style="color:#ff5c57">read-line&lt;/span>)))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get a list of calories from stdin, stopping when EOF is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-calorie-list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">eof-object?&lt;/span> line) &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> (&lt;span style="color:#ff5c57">cons&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (get-calorie-list))])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum a list of numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum nums) (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> nums))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get the top N largest numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (largest-nums nums n) (&lt;span style="color:#ff5c57">take&lt;/span> (&lt;span style="color:#ff5c57">sort&lt;/span> nums &lt;span style="color:#ff5c57">&amp;gt;&lt;/span>) n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum the top three largest calorie counts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(sum (largest-nums (get-calorie-list) &lt;span style="color:#ff9f43">3&lt;/span>))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Bézier Curve Visualization</title><link>/projects/bezier_curve_visualization/</link><pubDate>Sat, 18 Sep 2021 12:00:00 -0500</pubDate><guid>/projects/bezier_curve_visualization/</guid><description>&lt;iframe width="640" height="360" frameborder="0" src="https://www.shadertoy.com/embed/NdG3zt?gui=true&amp;t=10&amp;paused=true&amp;muted=false" allowfullscreen>&lt;/iframe>
&lt;p>&lt;em>Hover over the image above and click the play button in the bottom left&lt;/em>&lt;/p>
&lt;hr>
&lt;p>After watching Freya Holmér&amp;rsquo;s video on Bézier curves &lt;em>(linked below)&lt;/em>, I was inspired to create a GPU shader based on her visualizations.
The four control points (unmoving white circles) can be dragged to change the curve.
The lines are rendered using 2D distance fields.&lt;/p>
&lt;hr>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/aVwxzDHniEw?si=lKBcgp903fc02blu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen>&lt;/iframe></description></item><item><title>University Graphics Project</title><link>/projects/university_graphics_project/</link><pubDate>Sat, 01 May 2021 19:00:00 -0500</pubDate><guid>/projects/university_graphics_project/</guid><description>&lt;p>&lt;a href="https://github.com/EliasWatson/Graphics-Project">&lt;em>View this project on GitHub&lt;/em>&lt;/a>&lt;/p>
&lt;p>For my computer science independent study at Bob Jones University, I wrote a realistic realtime 3D renderer in C++ and OpenGL.
I spent 148 hours on this project over the course of four months.&lt;/p>
&lt;p>The program supports loading 3D scenes from GLTF files.
It can render shadows and skybox-based reflections.
The surface shader supports basic PBR materials with albedo, metallic, roughness, and normal maps.
The user can navigate the scene in a free-cam with the WASD keys and the mouse.
The scene can be inspected and edited through the included GUI.&lt;/p>
&lt;p>Prior to this project, I had experience with writing OpenGL shaders on ShaderToy.
However, this project taught me a lot about the OpenGL pipeline and gave me a more complete picture of how 3D graphics are rendered to the screen.
I also learned how to use CMake to build C++ projects across multiple platforms.&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://eliaswatson.dev/university_graphics_project/dragon_scene.jpg" alt="Dragon Scene Screenshot">&lt;/p>
&lt;p>&lt;img src="https://eliaswatson.dev/university_graphics_project/cash_register.jpg" alt="Cash Register Scene Screenshot">&lt;/p></description></item></channel></rss>