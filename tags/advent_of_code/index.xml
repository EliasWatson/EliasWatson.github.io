<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent_of_code on Elias Watson</title><link>/tags/advent_of_code/</link><description>Elias Watson (Advent_of_code)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Dec 2022 13:00:00 -0500</lastBuildDate><atom:link href="/tags/advent_of_code/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2022</title><link>/posts/aoc_2022/</link><pubDate>Sat, 03 Dec 2022 13:00:00 -0500</pubDate><guid>/posts/aoc_2022/</guid><description>&lt;p>This year I decided to solve &lt;a href="https://adventofcode.com/2022">Advent of Code&lt;/a> in &lt;a href="https://racket-lang.org">Racket&lt;/a>.
I&amp;rsquo;ve seen lots of people gush over how much they love Lisp, so I want to see what it&amp;rsquo;s all about.
The functional paradigm isn&amp;rsquo;t completely foreign to me as I&amp;rsquo;ve written a few web apps in Elm and I&amp;rsquo;ve messed around with Haskell, but I&amp;rsquo;ve never used a Lisp for anything complex.&lt;/p>
&lt;h1 id="day-1---calorie-counting" >
&lt;div>
&lt;a href="#day-1---calorie-counting">
##
&lt;/a>
Day 1 - Calorie Counting
&lt;/div>
&lt;/h1>
&lt;h2 id="part-1" >
&lt;div>
&lt;a href="#part-1">
#
&lt;/a>
Part 1
&lt;/div>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum integers from stdin until a blank line (or EOF) is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">non-empty-string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">string-&amp;gt;number&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (sum-input-integers-until-break (&lt;span style="color:#ff5c57">read-line&lt;/span>)))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get a list of calories from stdin, stopping when EOF is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-calorie-list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">eof-object?&lt;/span> line) &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> (&lt;span style="color:#ff5c57">cons&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (get-calorie-list))])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get the maximum calories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">max&lt;/span> (get-calorie-list))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="part-2" >
&lt;div>
&lt;a href="#part-2">
#
&lt;/a>
Part 2
&lt;/div>
&lt;/h2>
&lt;p>Part 2 is almost identical.
The only difference is that we sum the top three calorie counts instead of just taking the maximum.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum integers from stdin until a blank line (or EOF) is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">non-empty-string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">string-&amp;gt;number&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (sum-input-integers-until-break (&lt;span style="color:#ff5c57">read-line&lt;/span>)))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get a list of calories from stdin, stopping when EOF is encountered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-calorie-list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">eof-object?&lt;/span> line) &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> (&lt;span style="color:#ff5c57">cons&lt;/span> (sum-input-integers-until-break line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (get-calorie-list))])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum a list of numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum nums) (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> nums))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Get the top N largest numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (largest-nums nums n) (&lt;span style="color:#ff5c57">take&lt;/span> (&lt;span style="color:#ff5c57">sort&lt;/span> nums &lt;span style="color:#ff5c57">&amp;gt;&lt;/span>) n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Sum the top three largest calorie counts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(sum (largest-nums (get-calorie-list) &lt;span style="color:#ff9f43">3&lt;/span>))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="day-2---rock-paper-scissors" >
&lt;div>
&lt;a href="#day-2---rock-paper-scissors">
##
&lt;/a>
Day 2 - Rock Paper Scissors
&lt;/div>
&lt;/h1>
&lt;h2 id="part-1-1" >
&lt;div>
&lt;a href="#part-1-1">
#
&lt;/a>
Part 1
&lt;/div>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/string)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PARSING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-choice c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff6ac1">or&lt;/span> (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;A&amp;#34;&lt;/span>) (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;X&amp;#34;&lt;/span>)) &lt;span style="color:#ff9f43">0&lt;/span>] &lt;span style="color:#78787e">; Rock -&amp;gt; 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff6ac1">or&lt;/span> (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;B&amp;#34;&lt;/span>) (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;Y&amp;#34;&lt;/span>)) &lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#78787e">; Paper -&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff6ac1">or&lt;/span> (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;C&amp;#34;&lt;/span>) (&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;Z&amp;#34;&lt;/span>)) &lt;span style="color:#ff9f43">2&lt;/span>] &lt;span style="color:#78787e">; Scissors -&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">-1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Example: &amp;#34;B X&amp;#34; -&amp;gt; &amp;#39;(1 0)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-strategy-line line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> parse-choice (&lt;span style="color:#ff5c57">string-split&lt;/span> line)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-all-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (read-all-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-strategies)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> parse-strategy-line (read-all-lines)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; SCORING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; The winning choice can be calculated by just adding 1 and modulo&amp;#39;ing by 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 0 (Rock) is beat by 1 (Paper)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 1 (Paper) is beat by 2 (Scissors)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 2 (Scissors) is beat by 0 (Rock)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (winning-choice n) (&lt;span style="color:#ff5c57">modulo&lt;/span> (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>) &lt;span style="color:#ff9f43">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Since rock gets 1 point, paper gets 2, and scissors gets 3, we can just&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; add one to our numeric representation of the choices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-choice n) (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-outcome other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you (winning-choice other)) &lt;span style="color:#ff9f43">6&lt;/span>) &lt;span style="color:#78787e">; 6 points for winning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you other) &lt;span style="color:#ff9f43">3&lt;/span>) &lt;span style="color:#78787e">; 3 points for drawing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>))) &lt;span style="color:#78787e">; No points for losing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-round other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (score-choice you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (score-outcome other you)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-rounds rounds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> (&lt;span style="color:#ff6ac1">lambda&lt;/span> (r) (&lt;span style="color:#ff5c57">apply&lt;/span> score-round r)) rounds))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum nums) (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> nums))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(sum (score-rounds (read-strategies)))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="part-2-1" >
&lt;div>
&lt;a href="#part-2-1">
#
&lt;/a>
Part 2
&lt;/div>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/string)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; LOGIC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; The winning choice can be calculated by just adding 1 and modulo&amp;#39;ing by 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 0 (Rock) is beat by 1 (Paper)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 1 (Paper) is beat by 2 (Scissors)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 2 (Scissors) is beat by 0 (Rock)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (winning-choice n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">modulo&lt;/span> (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>) &lt;span style="color:#ff9f43">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Likewise, the losing choice can be calculated by adding 2 and modulo&amp;#39;ing by 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 0 (Rock) beats 2 (Scissors)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 1 (Paper) beats 0 (Rock)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; 2 (Scissors) beats 1 (Paper)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (losing-choice n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">modulo&lt;/span> (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">2&lt;/span>) &lt;span style="color:#ff9f43">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PARSING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-choice c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;A&amp;#34;&lt;/span>) &lt;span style="color:#ff9f43">0&lt;/span>] &lt;span style="color:#78787e">; Rock -&amp;gt; 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;B&amp;#34;&lt;/span>) &lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#78787e">; Paper -&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> c &lt;span style="color:#5af78e">&amp;#34;C&amp;#34;&lt;/span>) &lt;span style="color:#ff9f43">2&lt;/span>] &lt;span style="color:#78787e">; Scissors -&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">-1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-outcome other outcome)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">list&lt;/span> other
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> outcome &lt;span style="color:#5af78e">&amp;#34;X&amp;#34;&lt;/span>) (losing-choice other)] &lt;span style="color:#78787e">; Lose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> outcome &lt;span style="color:#5af78e">&amp;#34;Y&amp;#34;&lt;/span>) other] &lt;span style="color:#78787e">; Draw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#ff5c57">equal?&lt;/span> outcome &lt;span style="color:#5af78e">&amp;#34;Z&amp;#34;&lt;/span>) (winning-choice other)] &lt;span style="color:#78787e">; Win&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">-1&lt;/span>])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (parse-strategy-line line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([fields (&lt;span style="color:#ff5c57">string-split&lt;/span> line)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (parse-outcome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (parse-choice (&lt;span style="color:#ff5c57">list-ref&lt;/span> fields &lt;span style="color:#ff9f43">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">list-ref&lt;/span> fields &lt;span style="color:#ff9f43">1&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-all-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (read-all-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (read-strategies)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> parse-strategy-line (read-all-lines)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; Since rock gets 1 point, paper gets 2, and scissors gets 3, we can just&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">; add one to our numeric representation of the choices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-choice n) (&lt;span style="color:#ff5c57">+&lt;/span> n &lt;span style="color:#ff9f43">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-outcome other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you (winning-choice other)) &lt;span style="color:#ff9f43">6&lt;/span>) &lt;span style="color:#78787e">; 6 points for winning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#ff5c57">=&lt;/span> you other) &lt;span style="color:#ff9f43">3&lt;/span>) &lt;span style="color:#78787e">; 3 points for drawing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">else&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>))) &lt;span style="color:#78787e">; No points for losing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-round other you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (score-choice you)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (score-outcome other you)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (score-rounds rounds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">map&lt;/span> (&lt;span style="color:#ff6ac1">lambda&lt;/span> (r) (&lt;span style="color:#ff5c57">apply&lt;/span> score-round r)) rounds))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (sum nums) (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> nums))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(sum (score-rounds (read-strategies)))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="day-3---get-organized" >
&lt;div>
&lt;a href="#day-3---get-organized">
##
&lt;/a>
Day 3 - Get Organized
&lt;/div>
&lt;/h1>
&lt;h2 id="part-1-2" >
&lt;div>
&lt;a href="#part-1-2">
#
&lt;/a>
Part 1
&lt;/div>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-input-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (get-input-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; DUPLICATE FINDING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (split-string-in-half s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([half-index (&lt;span style="color:#ff5c57">/&lt;/span> (&lt;span style="color:#ff5c57">string-length&lt;/span> s) &lt;span style="color:#ff9f43">2&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">substring&lt;/span> s &lt;span style="color:#ff9f43">0&lt;/span> half-index)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">substring&lt;/span> s half-index))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (chars-in-both-strings a b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">set-intersect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">string-&amp;gt;list&lt;/span> a)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">string-&amp;gt;list&lt;/span> b)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (find-duplicate-in-rucksack s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">apply&lt;/span> chars-in-both-strings (split-string-in-half s)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PRIORITY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (item-priority c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> c)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">&amp;lt;&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\A&lt;/span>)) &lt;span style="color:#ff9f43">27&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>)) &lt;span style="color:#ff9f43">1&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (rucksack-priority s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (item-priority (&lt;span style="color:#ff5c57">car&lt;/span> (find-duplicate-in-rucksack s))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">map&lt;/span> rucksack-priority (get-input-lines)))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="part-2-2" >
&lt;div>
&lt;a href="#part-2-2">
#
&lt;/a>
Part 2
&lt;/div>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-racket" data-lang="racket">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">require&lt;/span> racket/set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; IO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (get-input-lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([line (&lt;span style="color:#ff5c57">read-line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">string?&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> line (get-input-lines))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; GROUPING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (into-groups elves)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">not&lt;/span> (&lt;span style="color:#ff5c57">empty?&lt;/span> elves))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">cons&lt;/span> (&lt;span style="color:#ff5c57">take&lt;/span> elves &lt;span style="color:#ff9f43">3&lt;/span>) (into-groups (&lt;span style="color:#ff5c57">drop&lt;/span> elves &lt;span style="color:#ff9f43">3&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#39;&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (duplicate-char-in-strings strs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">car&lt;/span> (&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">set-intersect&lt;/span> (&lt;span style="color:#ff5c57">map&lt;/span> &lt;span style="color:#ff5c57">string-&amp;gt;list&lt;/span> strs))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; PRIORITY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (item-priority c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">let&lt;/span> ([i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> c)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff5c57">&amp;lt;&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\A&lt;/span>)) &lt;span style="color:#ff9f43">27&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">-&lt;/span> i (&lt;span style="color:#ff5c57">char-&amp;gt;integer&lt;/span> &lt;span style="color:#5af78e">#\a&lt;/span>)) &lt;span style="color:#ff9f43">1&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff6ac1">define&lt;/span> (group-priority g)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (item-priority (duplicate-char-in-strings g)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">;; MAIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ff5c57">apply&lt;/span> &lt;span style="color:#ff5c57">+&lt;/span> (&lt;span style="color:#ff5c57">map&lt;/span> group-priority (into-groups (get-input-lines))))&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>